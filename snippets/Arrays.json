{
    "int array": {
        "prefix": "array",
        "body": "${1:int} array",
        "description": "returns:array (of length int);remarks:recall that an array is a pointer-plus-structure,"
    },
    "[": {
        "prefix": "[",
        "body": "[",
        "description": "returns:mark;remarks:"
    },
    "[ obj[0] ... obj[n-1] ]": {
        "prefix": "]",
        "body": "[ ${1:obj[0] ... obj[n-1]} ]",
        "description": "returns:array;remarks:array of these objects"
    },
    "array length": {
        "prefix": "length",
        "body": "${1:array} length",
        "description": "returns:int;remarks:"
    },
    "array index get": {
        "prefix": "get",
        "body": "${1:array} ${2:index} get",
        "description": "returns:array[index];remarks:"
    },
    "array index any put": {
        "prefix": "put",
        "body": "${1:array} ${2:index} ${3:any} put",
        "description": "returns:-;remarks:stores any as array[index]"
    },
    "array index count getinterval": {
        "prefix": "getinterval",
        "body": "${1:array} ${2:index} ${3:count} getinterval",
        "description": "returns:subarray;remarks:the subarray is array[index] ... array[index+count-1]"
    },
    "array1 index array2 putinterval": {
        "prefix": "putinterval",
        "body": "${1:array1} ${2:index} ${3:array2} putinterval",
        "description": "returns:-;remarks:replaces array1 with aray2 starting with [index]"
    },
    "array aload": {
        "prefix": "aload",
        "body": "${1:array} aload",
        "description": "returns:a[0] ... a[n-1] array;remarks:pushes the array onto the stack"
    },
    "a[0] ... a[n-1] array astore": {
        "prefix": "astore",
        "body": "${1:a[0] ... a[n-1]} ${2:array} astore",
        "description": "returns:array;remarks:stores the elements into the array all in one shot"
    },
    "array1 array2 copy": {
        "prefix": "copy",
        "body": "${1:array1} ${2:array2} copy",
        "description": "returns:subarray2;remarks:copies array1 to initial subarray of array2"
    },
    "array proc forall": {
        "prefix": "forall",
        "body": "${1:array} ${2:proc} forall",
        "description": "returns:-;remarks:executes proc for each element of array"
    },
    "int dict": {
        "prefix": "dict",
        "body": "${1:int} dict",
        "description": "returns:dict;remarks:creates dictionary of capacity int"
    },
    "dict length": {
        "prefix": "length",
        "body": "${1:dict} length",
        "description": "returns:int;remarks:returns number of key-value pairs in the dictionary"
    },
    "dict maxlength": {
        "prefix": "maxlength",
        "body": "${1:dict} maxlength",
        "description": "returns:int;remarks:capactity of dict"
    },
    "dict begin": {
        "prefix": "begin",
        "body": "${1:dict} begin",
        "description": "returns:-;remarks:push dict on dict stack"
    },
    "end": {
        "prefix": "end",
        "body": "end",
        "description": "returns:-;remarks:pops dict stack"
    },
    "key value def": {
        "prefix": "def",
        "body": "${1:key} ${2:value} def",
        "description": "returns:-;remarks:associates key &amp; value in current dict"
    },
    "key load": {
        "prefix": "load",
        "body": "${1:key} load",
        "description": "returns:value;remarks:searches dict stack for key and returns value"
    },
    "key value store": {
        "prefix": "store",
        "body": "${1:key} ${2:value} store",
        "description": "returns:-;remarks:replaces topmost definition of key"
    },
    "dict key get": {
        "prefix": "get",
        "body": "${1:dict} ${2:key} get",
        "description": "returns:any;remarks:returns value in dict associated to key"
    },
    "dict key value put": {
        "prefix": "put",
        "body": "${1:dict} ${2:key} ${3:value} put",
        "description": "returns:-;remarks:associates key value into dict"
    },
    "dict key known": {
        "prefix": "known",
        "body": "${1:dict} ${2:key} known",
        "description": "returns:bool;remarks:tests whether key is in dict"
    },
    "key where": {
        "prefix": "where",
        "body": "${1:key} where",
        "description": "returns:dict true OR false;remarks:finds dict in which key is defined"
    },
    "dict1 dict2 copy": {
        "prefix": "copy",
        "body": "${1:dict1} ${2:dict2} copy",
        "description": "returns:dict2;remarks:copies contents of dict1 to dict2"
    },
    "dict proc forall": {
        "prefix": "forall",
        "body": "${1:dict} ${2:proc} forall",
        "description": "returns:-;remarks:executes proc for each element of dict"
    },
    "errordict": {
        "prefix": "errordict",
        "body": "errordict",
        "description": "returns:dict;remarks:push errordict on operand stack"
    },
    "systemdict": {
        "prefix": "systemdict",
        "body": "systemdict",
        "description": "returns:dict;remarks:push systemdict on operand stack"
    },
    "userdict": {
        "prefix": "userdict",
        "body": "userdict",
        "description": "returns:dict;remarks:push userdict on operand stack"
    },
    "currentdict": {
        "prefix": "currentdict",
        "body": "currentdict",
        "description": "returns:dict;remarks:push currentdict on operand stack"
    },
    "countdictstack": {
        "prefix": "countdictstack",
        "body": "countdictstack",
        "description": "returns:int;remarks:counts elements on dictstack"
    },
    "array dictstack": {
        "prefix": "dictstack",
        "body": "${1:array} dictstack",
        "description": "returns:subarray;remarks:copy dictstack into array"
    },
    "Arrays": {
        "prefix": "commandForArrays",
        "body": "${1|aload,dictstack,put,getinterval,get,length,forall,copy,putinterval,astore,countdictstack,currentdict,begin,get,known,put,length,maxlength,forall,copy,end,errordict,array,dict,load,def,store,where,systemdict,userdict,[,]|}"
    }
}