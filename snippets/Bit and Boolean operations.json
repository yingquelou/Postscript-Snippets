{
    "any1 any2 eq": {
        "prefix": "eq",
        "body": "${1:any1} ${2:any2} eq",
        "description": "returns:bool;remarks:tests equal"
    },
    "any1 any2 ne": {
        "prefix": "ne",
        "body": "${1:any1} ${2:any2} ne",
        "description": "returns:bool;remarks:tests not equal"
    },
    "num1|string1 num2|string2 ge": {
        "prefix": "ge",
        "body": "${1|num1,string1|} ${2|num2,string2|} ge",
        "description": "returns:bool;remarks:tests greater than or equal"
    },
    "num1|string1 num2|string2 gt": {
        "prefix": "gt",
        "body": "${1|num1,string1|} ${2|num2,string2|} gt",
        "description": "returns:bool;remarks:"
    },
    "num1|string1 num2|string2 le": {
        "prefix": "le",
        "body": "${1|num1,string1|} ${2|num2,string2|} le",
        "description": "returns:bool;remarks:"
    },
    "num1|string1 num2|string2 lt": {
        "prefix": "lt",
        "body": "${1|num1,string1|} ${2|num2,string2|} lt",
        "description": "returns:bool;remarks:"
    },
    "bool1|int1 bool2|int2 and": {
        "prefix": "and",
        "body": "${1|bool1,int1|} ${2|bool2,int2|} and",
        "description": "returns:bool|int;remarks:logical|bitwise and"
    },
    "bool|int not": {
        "prefix": "not",
        "body": "${1|bool,int|} not",
        "description": "returns:bool|int;remarks:"
    },
    "bool1|int1 bool2|int2 or": {
        "prefix": "or",
        "body": "${1|bool1,int1|} ${2|bool2,int2|} or",
        "description": "returns:bool|int;remarks:"
    },
    "bool1|int1 bool2|int2 xor": {
        "prefix": "xor",
        "body": "${1|bool1,int1|} ${2|bool2,int2|} xor",
        "description": "returns:bool|int;remarks:"
    },
    "true": {
        "prefix": "true",
        "body": "true",
        "description": "returns:true;remarks:"
    },
    "false": {
        "prefix": "false",
        "body": "false",
        "description": "returns:false;remarks:"
    },
    "int1 shift bitshift": {
        "prefix": "bitshift",
        "body": "${1:int1} ${2:shift} bitshift",
        "description": "returns:int2;remarks:positive is left"
    },
    "Bit and Boolean operations": {
        "prefix": "commandForBit and Boolean operations",
        "body": "${1|eq,ne,and,or,xor,not,false,bitshift,ge,gt,le,lt,true|}"
    }
}