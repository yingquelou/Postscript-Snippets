{
    "matrix": {
        "prefix": "matrix",
        "body": "matrix",
        "description": "returns:matrix;remarks:creates identity matrix"
    },
    "initmatrix": {
        "prefix": "initmatrix",
        "body": "initmatrix",
        "description": "returns:-;remarks:sets CTM to device default"
    },
    "matrix identmatrix": {
        "prefix": "identmatrix",
        "body": "${1:matrix} identmatrix",
        "description": "returns:matrix;remarks:sets to identity"
    },
    "matrix defaultmatrix": {
        "prefix": "defaultmatrix",
        "body": "${1:matrix} defaultmatrix",
        "description": "returns:matrix;remarks:fills matrix with device default matrix"
    },
    "matrix currentmatrix": {
        "prefix": "currentmatrix",
        "body": "${1:matrix} currentmatrix",
        "description": "returns:matrix;remarks:fills matrix with current CTM"
    },
    "matrix setmatrix": {
        "prefix": "setmatrix",
        "body": "${1:matrix} setmatrix",
        "description": "returns:-;remarks:replace CTM by matrix"
    },
    "tx ty translate": {
        "prefix": "translate",
        "body": "${1:tx} ${2:ty} translate",
        "description": "returns:-;remarks:translates origin"
    },
    "tx ty matrix translate": {
        "prefix": "translate",
        "body": "${1:tx} ${2:ty} ${3:matrix} translate",
        "description": "returns:matrix;remarks:defines translation by (tx, ty)"
    },
    "sx sy scale": {
        "prefix": "scale",
        "body": "${1:sx} ${2:sy} scale",
        "description": "returns:-;remarks:scales user space"
    },
    "sx sy matrix scale": {
        "prefix": "scale",
        "body": "${1:sx} ${2:sy} ${3:matrix} scale",
        "description": "returns:matrix;remarks:defines scaqling by (sx, sy)"
    },
    "angle rotate": {
        "prefix": "rotate",
        "body": "${1:angle} rotate",
        "description": "returns:-;remarks:rotates user space"
    },
    "angle matrix rotate": {
        "prefix": "rotate",
        "body": "${1:angle} ${2:matrix} rotate",
        "description": "returns:matrix;remarks:define rotation by angle degrees"
    },
    "matrix concat": {
        "prefix": "concat",
        "body": "${1:matrix} concat",
        "description": "returns:-;remarks:CTM = matrix*CTM"
    },
    "matrix1 matrix2 matrix3 concatmatrix": {
        "prefix": "concatmatrix",
        "body": "${1:matrix1} ${2:matrix2} ${3:matrix3} concatmatrix",
        "description": "returns:matrix3;remarks:matrix3 = matrix1*matrix2"
    },
    "x y transform": {
        "prefix": "transform",
        "body": "${1:x} ${2:y} transform",
        "description": "returns:x' y';remarks:CTM*(x, y) - row or column vectors?"
    },
    "x y matrix transform": {
        "prefix": "transform",
        "body": "${1:x} ${2:y} ${3:matrix} transform",
        "description": "returns:x' y';remarks:matrix*(x, y)"
    },
    "dx dy dtransform": {
        "prefix": "dtransform",
        "body": "${1:dx} ${2:dy} dtransform",
        "description": "returns:dx' dy';remarks:"
    },
    "dx dy matrix dtransform": {
        "prefix": "dtransform",
        "body": "${1:dx} ${2:dy} ${3:matrix} dtransform",
        "description": "returns:dx' dy';remarks:"
    },
    "x y itransform": {
        "prefix": "itransform",
        "body": "${1:x} ${2:y} itransform",
        "description": "returns:x' y';remarks:inverse transform by CTM"
    },
    "x y matrix itransform": {
        "prefix": "itransform",
        "body": "${1:x} ${2:y} ${3:matrix} itransform",
        "description": "returns:x' y';remarks:inverse transform"
    },
    "dx dy idtransform": {
        "prefix": "idtransform",
        "body": "${1:dx} ${2:dy} idtransform",
        "description": "returns:dx' dy';remarks:"
    },
    "dx dy matrix idtransform": {
        "prefix": "idtransform",
        "body": "${1:dx} ${2:dy} ${3:matrix} idtransform",
        "description": "returns:dx' dy';remarks:"
    },
    "matrix1 matrix2 invertmatrix": {
        "prefix": "invertmatrix",
        "body": "${1:matrix1} ${2:matrix2} invertmatrix",
        "description": "returns:matrix2;remarks:matrix2 = inverse of matrix1"
    },
    "Matrices": {
        "prefix": "commandForMatrices",
        "body": "${1|rotate,rotate,dtransform,idtransform,dtransform,idtransform,initmatrix,matrix,concat,currentmatrix,defaultmatrix,identmatrix,setmatrix,invertmatrix,concatmatrix,scale,scale,translate,translate,itransform,itransform,transform,transform|}"
    }
}